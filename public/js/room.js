/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.11.1
	(function() {
	  var addRoomLink, rvm, socket;

	  socket = io();

	  Vue.component('room-item', {
	    template: '<div><p class="hiddenRoomId" hidden>{{  room._id }}</p><h2><a class="roomIdLinkTarget">{{ room.name }}</a><span class="pull-right"><input class="btn" type="button" v-on:click="$emit(\'delete-room\')" value="x" /></span></div>',
	    props: ['room']
	  });

	  rvm = new Vue({
	    el: "#wrapRooms",
	    mounted: function() {
	      return this.$http.get('/api/rooms/get').then(function(response) {
	        return this.rooms = response.body.data;
	      }, function(response) {
	        return console.log(response);
	      });
	    },
	    data: {
	      newRoom: "",
	      rooms: []
	    },
	    methods: {
	      addRoom: function() {
	        var nr, r;
	        nr = this.newRoom.trim();
	        if (!nr) {
	          return;
	        }
	        r = {
	          name: nr
	        };
	        this.$http.post('/api/rooms/post', r).then(function(response) {
	          return socket.emit('addRoom', response.body);
	        }, function(response) {
	          return console.log(response);
	        });
	        return this.newRoom = "";
	      },
	      deleteRoom: function(index) {
	        var r;
	        r = Object.assign({}, this.rooms[index]);
	        if (confirm("「" + r.name + "」　を削除してよろしいですか？")) {
	          return this.$http["delete"]("/api/rooms/delete", {
	            body: r
	          }).then(function() {
	            return socket.emit('deleteRoom', index);
	          }, function(response) {
	            return console.log(response);
	          });
	        }
	      }
	    }
	  });

	  addRoomLink = function(speed) {
	    return setTimeout(function() {
	      return $('.hiddenRoomId').each(function() {
	        return $(this).siblings('h2').find('a.roomIdLinkTarget').attr('href', "rooms/" + $(this).text());
	      });
	    }, speed);
	  };

	  addRoomLink(1000);

	  socket.on('addRoom', function(room) {
	    rvm.rooms.push(room);
	    return addRoomLink(1000);
	  });

	  socket.on('deleteRoom', function(index) {
	    return rvm.rooms.splice(index, 1);
	  });

	}).call(this);

	//# sourceMappingURL=room.js.map


/***/ }
/******/ ]);